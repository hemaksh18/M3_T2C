#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <CL.h>
#include <mpi.h>

void dataSortOpenCL(int *array, int size) {
    cl_platform_id platform;
    cl_device_id device;
    cl_context context;
    cl_command_queue queue;
    cl_program program;
    cl_kernel kernel;
    cl_mem array;
    cl_int err;

    clGetPlatformIDs(1, &platform, NULL);
    clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, 1, &device, NULL);
    context = clCreateContext(NULL, 1, &device, NULL, NULL, &err);
    queue = clCreateCommandQueue(context, device, 0, &err);

    const char *source = "#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable\n"
                         "__kernel void dataSort(__global int *array, const int size) {\n"
                         "    int i, j, temp;\n"
                         "    for (i = 0; i < size - 1; i++) {\n"
                         "        for (j = 0; j < size - i - 1; j++) {\n"
                         "            if (array[j] > array[j + 1]) {\n"
                         "                temp = array[j];\n"
                         "                array[j] = array[j + 1];\n"
                         "                array[j + 1] = temp;\n"
                         "            }\n"
                         "        }\n"
                         "    }\n"
                         "}\n";
    program = clCreateProgramWithSource(context, 1, &source, NULL, NULL);
    clBuildProgram(program, 1, &device, NULL, NULL, NULL);
    kernel = clCreateKernel(program, "dataSort", NULL);

    array = clCreateBuffer(context, CL_MEM_READ_WRITE | CL_MEM_COPY_HOST_PTR,sizeof(int) * size, array, NULL);

    clSetKernelArg(kernel, 0, sizeof(cl_mem), &array);
    clSetKernelArg(kernel, 1, sizeof(int), &size);

    size_t global_size = size;
    clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global_size, NULL, 0, NULL, NULL);

    clEnqueueReadBuffer(queue, array, CL_TRUE, 0, sizeof(int) * size, array, 0, NULL, NULL);

    clReleaseMemObject(array);
    clReleaseKernel(kernel);
    clReleaseProgram(program);
    clReleaseCommandQueue(queue);
    clReleaseContext(context);
}

int main(int argc, char *argv[]) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int array_size = 10000;
    int local_size = array_size / size;

    int *local_array = (int *)malloc(sizeof(int) * local_size);

    srand(time(NULL) + rank);
    for (int i = 0; i < local_size; i++) {
        local_array[i] = rand() % 100;
    }

    double start = MPI_Wtime();

    dataSortOpenCL(local_array, local_size);

    double end = MPI_Wtime();

    printf("Process %d: Time taken: %.2f microseconds\n", rank, (end - start) * 1e6);

    int *sorted_array = NULL;
    if (rank == 0) {
        sorted_array = (int *)malloc(sizeof(int) * array_size);
    }
    MPI_Gather(local_array, local_size, MPI_INT, sorted_array, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    free(local_array);

    MPI_Finalize();

    return 0;
}

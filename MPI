#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>

void dataSort(int array[], int size) {
    int i, j, temp;
    for (i = 0; i < size - 1; i++) {
        for (j = 0; j < size - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

int main(int argc, char *argv[]) {
    MPI_Init(&argc, &argv);

    int size, rank;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    int array_size = 10000;

    int *array = NULL;
    int *local_array = NULL;
    if (rank == 0) {
        array = (int *)malloc(array_size * sizeof(int));
        srand(time(NULL));
        for (int i = 0; i < array_size; i++) {
            array[i] = rand() % 100;
        }
    }

    MPI_Bcast(array, array_size, MPI_INT, 0, MPI_COMM_WORLD);

    int piece_size = array_size / size;
    local_array = (int *)malloc(piece_size * sizeof(int));
    MPI_Scatter(array, piece_size, MPI_INT, local_array, piece_size, MPI_INT, 0, MPI_COMM_WORLD);

    double start = MPI_Wtime();

    dataSort(local_array, piece_size);

    double end = MPI_Wtime();

    int *sorted_arr = NULL;
    if (rank == 0) {
        sorted_arr = (int *)malloc(array_size * sizeof(int));
    }
    MPI_Gather(local_array, piece_size, MPI_INT, sorted_arr, piece_size, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        double time_spent = end - start;
        printf("Time taken: %.2f microseconds\n", time_spent * 1e6);
        free(sorted_arr);
    }

    MPI_Finalize();

    return 0;
}
